// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Moment
import Combine
import CoreFoundation
import CryptoKit
import Darwin
import Foundation
import MachO
@_exported import Moment
import Network
import NetworkExtension
import OSLog
import SQLite3
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct CashbackProgram {
  public var businessID: Swift.String {
    get
  }
  public var businessName: Swift.String {
    get
  }
  public var businessImageURL: Swift.String {
    get
  }
  public var category: Moment.BusinessCategory {
    get
  }
  public var url: Swift.String {
    get
  }
  public var programName: Swift.String {
    get
  }
  public var displayDisallowedCases: Swift.String {
    get
  }
  public var displayCaution: Swift.String {
    get
  }
  public var products: [Moment.CashbackProduct] {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct CashbackDetailsView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6Moment19CashbackDetailsViewV4bodyQrvp", 0) __
}
public struct CashbackTransactionTrigger {
  public var event: Moment.CashbackTriggerEvent {
    get
  }
  public var duration: Moment.Duration {
    get
  }
}
public enum CashbackTriggerEvent {
  case unknownCashbackEvent
  case purchased
  case reserved
  case purchaseConfirmed
  case used
  case departure
  case ticketed
  case deliveryStarted
  case deliveryDone
  case checkout
  case returned
  case paid
  case unsent
  case UNRECOGNIZED(Swift.Int)
}
public struct CashbackCommission {
  public var amount: Swift.String {
    get
  }
  public var unit: Moment.CashbackCommissionUnit {
    get
  }
}
public enum CashbackCommissionUnit {
  case unknownCashbackCommissionUnit
  case percentageCommissionUnit
  case krwCommissionUnit
  case UNRECOGNIZED(Swift.Int)
}
public enum CashbackCommissionType {
  case unknownCashbackCommissionType
  case cps
  case cpa
  case cpc
  case cpm
  case UNRECOGNIZED(Swift.Int)
}
@_hasMissingDesignatedInitializers final public class MomentCashbackService : Swift.Sendable {
  public static let shared: Moment.MomentCashbackService
  #if compiler(>=5.3) && $AsyncAwait
  public static func listCashback() async throws -> [Moment.CashbackProgram]
  #endif
  public static func listCashback(completion: @escaping ([Moment.CashbackProgram]?, (any Swift.Error)?) -> Swift.Void)
  public static func listCashback(completion: @escaping (Swift.Result<[Moment.CashbackProgram], any Swift.Error>) -> Swift.Void)
  @_Concurrency.MainActor public static func goToCashback(cashbackBusinessId: Swift.String, cashbackViewDelegate: (any Moment.CashbackViewDelegate)?) -> Moment.CashbackDetailsView
  @_Concurrency.MainActor public static func goToCashbackViewController(cashbackBusinessId: Swift.String, cashbackViewDelegate: (any Moment.CashbackViewDelegate)?) -> UIKit.UIViewController
  public static func setUserId(_ userId: Swift.String)
  @objc deinit
}
public enum CashbackError : Swift.Error {
  case noUserId
  case invalidCashbackURL(Swift.String)
  case emptyCashbackId
  case APIError(any Swift.Error)
  case cashbackNotFound
  case initializationError
}
extension Moment.CashbackError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers public class MomentConstants {
  public static let MOMENT_NOTIFICATION_KEY: Swift.String
  @objc deinit
}
public protocol CashbackViewDelegate : AnyObject {
  func didLinkOpened(businessId: Swift.String, url: Foundation.URL)
  func didErrorOccurred(businessId: Swift.String, error: any Swift.Error)
}
public struct Duration {
  public var amount: Swift.String {
    get
  }
  public var unit: Moment.TimeUnit {
    get
  }
}
public enum TimeUnit {
  case unknownTimeUnit
  case second
  case minute
  case hour
  case day
  case week
  case month
  case year
  case UNRECOGNIZED(Swift.Int)
}
public enum BusinessCategory {
  case unknownBusinessCategory
  case food
  case mall
  case culture
  case travel
  case electronics
  case infant
  case health
  case fashion
  case beauty
  case finance
  case living
  case education
  case etc
  case UNRECOGNIZED(Swift.Int)
}
public struct CashbackProduct {
  public var target: Swift.String {
    get
  }
  public var startDateTimestampMillis: Swift.Int64 {
    get
  }
  public var endDateTimestampMillis: Swift.Int64 {
    get
  }
  public var commissionType: Moment.CashbackCommissionType {
    get
  }
  public var commission: Moment.CashbackCommission {
    get
  }
  public var platforms: Moment.CashbackPlatforms {
    get
  }
  public var transactionCreated: Moment.CashbackTransactionTrigger {
    get
  }
  public var transactionConfirmed: Moment.CashbackTransactionTrigger {
    get
  }
}
public enum CashbackPlatforms {
  case unknownCashbackPlatforms
  case allPlatforms
  case mobileApp
  case mobileWeb
  case mobileAppMobileWeb
  case pcWeb
  case mobileWebPcWeb
  case UNRECOGNIZED(Swift.Int)
}
